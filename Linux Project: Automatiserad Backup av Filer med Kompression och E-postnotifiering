Linux Project: Automatiserad Backup av Filer med Kompression och E-postnotifiering

Projektm√•l: Automatisera s√§kerhetskopiering av viktiga filer p√• en server. Denna s√§kerhetskopia ska komprimeras f√∂r att spara utrymme, lagras p√• en annan plats, och en e-postnotifiering ska skickas efter att s√§kerhetskopian √§r klar.


‚úÖ Steg-f√∂r-steg: Automatiserad Backup med Linux Bash-skript
H√§r f√∂ljer en steg-f√∂r-steg guide f√∂r att skapa en s√§kerhetskopieringsl√∂sning med komprimering och e-postnotifiering i Linux.

‚úÖ Steg 1: Installera n√∂dv√§ndiga verktyg
F√∂r att s√§kerst√§lla att alla n√∂dv√§ndiga verktyg finns installerade:
√ñppna terminalen.
K√∂r f√∂ljande kommandon f√∂r att installera tar, gzip, och mailutils om de inte redan √§r installerade:

üî¥ sudo apt update
üî¥ sudo apt install tar gzip mailutils
üî¥ tar: F√∂r att skapa en arkivfil.
üî¥ gzip: F√∂r att komprimera backupen.
üî¥ mailutils: F√∂r att skicka notifieringar via e-post.



Steg 2: Skapa kataloger
Best√§m var dina s√§kerhetskopior ska sparas och skapa n√∂dv√§ndiga kataloger. I detta exempel kommer s√§kerhetskopian att sparas i katalogen ~/root/technical_mindset/backups.
K√∂r f√∂ljande kommando f√∂r att skapa en backup-katalog:

mkdir -p ~/technical_mindset/backups

Steg 3: Skriv bash-skriptet
Nu ska du skapa ett bash-skript som utf√∂r s√§kerhetskopieringen och skickar e-postnotifieringar. Vi kommer att s√§kerhetskopiera 1 katalog: /etc.
Skapa ett nytt skript, t.ex. backup.sh:

#!/bin/bash

# Ange k√§llkatalogerna som ska s√§kerhetskopieras
SOURCE_DIRECTORIES="/etc"

# Ange backup-katalogen
BACKUP_DIRECTORY="/root/technical_mindset/backups"

# Skapa ett filnamn med dagens datum
DATE=$(date +"%Y%m%d")

BACKUP_FILE="$BACKUP_DIRECTORY/backup_$DATE.tar.gz"

# Debug-utskrift
echo "Creating backup file at: $BACKUP_FILE"
echo "Backing up directories: $SOURCE_DIRECTORIES"

# Skapa en s√§kerhetskopia med tar och komprimera med gzip
tar -czf $BACKUP_FILE $SOURCE_DIRECTORIES 2>> error_log.txt

# Kontrollera om backupen lyckades
if [ $? -eq 0 ]; then
    # Skicka ett e-postmeddelande om lyckad s√§kerhetskopia
    echo "Backup completed successfully on $(date)" | mail -s "Backup Success" hello.technicalmindset@gmail.com
else
    # Skicka ett e-postmeddelande om backupen misslyckades


Spara filen och avsluta genom att trycka p√• CTRL + X, sedan Y och Enter.

Steg 4: G√∂r skriptet exekverbart
F√∂r att kunna k√∂ra skriptet m√•ste du g√∂ra det exekverbart.
K√∂r detta kommando:

chmod +x ~/root/technical_mindset/backup.sh



Steg 5: Testa skriptet
Innan du schemal√§gger skriptet, testa det manuellt f√∂r att se till att det fungerar korrekt.

Kopiera kod
~/root/Technical_mindset/backup.sh

Kolla om filen skapades i backup-katalogen:

ls ~/root/Technical_mindset/backups

Om backupen lyckades, kontrollera om du har f√•tt ett e-postmeddelande. Om det inte fungerar, kan du testa med en enklare notifiering:

echo "Testmeddelande" | mail -s "Test" user@example.com



Steg 6: Automatisera med Cron
F√∂r att automatisera s√§kerhetskopieringen kan du schemal√§gga skriptet att k√∂ras automatiskt varje dag med hj√§lp av cron.
√ñppna crontab f√∂r att redigera schemal√§ggningar:

crontab -e

L√§gg till f√∂ljande rad f√∂r att k√∂ra s√§kerhetskopian varje dag kl. 2 p√• morgonen:

21 * * * ~/root/Technical_mindset/backup.sh
Spara och st√§ng crontab.

Steg 7: Kontrollera Cron-jobben
F√∂r att se till att cron-jobbet k√∂rs korrekt kan du kontrollera statusen med f√∂ljande kommando:
crontab -l



Real World Application
Detta projekt kan anv√§ndas f√∂r att regelbundet s√§kerhetskopiera viktiga filer p√• en server och f√• notifieringar om backupen lyckades. Det √§r ett praktiskt s√§tt att skydda data p√• och s√§kerst√§lla kontinuerlig drift i verkliga systemadministrationsmilj√∂er.
